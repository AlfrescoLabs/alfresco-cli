#!/usr/bin/env bash
#
# alfresco Bash Completion
# =======================
#
# Bash completion support for the `alfresco` command,
# generated by [picocli](http://picocli.info/) version 4.6.1.
#
# Installation
# ------------
#
# 1. Source all completion scripts in your .bash_profile
#
#   cd $YOUR_APP_HOME/bin
#   for f in $(find . -name "*_completion"); do line=". $(pwd)/$f"; grep "$line" ~/.bash_profile || echo "$line" >> ~/.bash_profile; done
#
# 2. Open a new bash console, and type `alfresco [TAB][TAB]`
#
# 1a. Alternatively, if you have [bash-completion](https://github.com/scop/bash-completion) installed:
#     Place this file in a `bash-completion.d` folder:
#
#   * /etc/bash-completion.d
#   * /usr/local/etc/bash-completion.d
#   * ~/bash-completion.d
#
# Documentation
# -------------
# The script is called by bash whenever [TAB] or [TAB][TAB] is pressed after
# 'alfresco (..)'. By reading entered command line parameters,
# it determines possible bash completions and writes them to the COMPREPLY variable.
# Bash then completes the user input if only one entry is listed in the variable or
# shows the options if more than one is listed in COMPREPLY.
#
# References
# ----------
# [1] http://stackoverflow.com/a/12495480/1440785
# [2] http://tiswww.case.edu/php/chet/bash/FAQ
# [3] https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html
# [4] http://zsh.sourceforge.net/Doc/Release/Options.html#index-COMPLETE_005fALIASES
# [5] https://stackoverflow.com/questions/17042057/bash-check-element-in-array-for-elements-in-another-array/17042655#17042655
# [6] https://www.gnu.org/software/bash/manual/html_node/Programmable-Completion.html#Programmable-Completion
# [7] https://stackoverflow.com/questions/3249432/can-a-bash-tab-completion-script-be-used-in-zsh/27853970#27853970
#

if [ -n "$BASH_VERSION" ]; then
  # Enable programmable completion facilities when using bash (see [3])
  shopt -s progcomp
elif [ -n "$ZSH_VERSION" ]; then
  # Make alias a distinct command for completion purposes when using zsh (see [4])
  setopt COMPLETE_ALIASES
  alias compopt=complete

  # Enable bash completion in zsh (see [7])
  autoload -U +X compinit && compinit
  autoload -U +X bashcompinit && bashcompinit
fi

# CompWordsContainsArray takes an array and then checks
# if all elements of this array are in the global COMP_WORDS array.
#
# Returns zero (no error) if all elements of the array are in the COMP_WORDS array,
# otherwise returns 1 (error).
function CompWordsContainsArray() {
  declare -a localArray
  localArray=("$@")
  local findme
  for findme in "${localArray[@]}"; do
    if ElementNotInCompWords "$findme"; then return 1; fi
  done
  return 0
}
function ElementNotInCompWords() {
  local findme="$1"
  local element
  for element in "${COMP_WORDS[@]}"; do
    if [[ "$findme" = "$element" ]]; then return 1; fi
  done
  return 0
}

# The `currentPositionalIndex` function calculates the index of the current positional parameter.
#
# currentPositionalIndex takes three parameters:
# the command name,
# a space-separated string with the names of options that take a parameter, and
# a space-separated string with the names of boolean options (that don't take any params).
# When done, this function echos the current positional index to std_out.
#
# Example usage:
# local currIndex=$(currentPositionalIndex "mysubcommand" "$ARG_OPTS" "$FLAG_OPTS")
function currentPositionalIndex() {
  local commandName="$1"
  local optionsWithArgs="$2"
  local booleanOptions="$3"
  local previousWord
  local result=0

  for i in $(seq $((COMP_CWORD - 1)) -1 0); do
    previousWord=${COMP_WORDS[i]}
    if [ "${previousWord}" = "$commandName" ]; then
      break
    fi
    if [[ "${optionsWithArgs}" =~ ${previousWord} ]]; then
      ((result-=2)) # Arg option and its value not counted as positional param
    elif [[ "${booleanOptions}" =~ ${previousWord} ]]; then
      ((result-=1)) # Flag option itself not counted as positional param
    fi
    ((result++))
  done
  echo "$result"
}

# Bash completion entry point function.
# _complete_alfresco finds which commands and subcommands have been specified
# on the command line and delegates to the appropriate function
# to generate possible options and subcommands for the last specified subcommand.
function _complete_alfresco() {
  local cmds0=(acs)
  local cmds1=(ags)
  local cmds2=(acs node)
  local cmds3=(acs person)
  local cmds4=(acs group)
  local cmds5=(acs site)
  local cmds6=(acs search)
  local cmds7=(acs node create)
  local cmds8=(acs node update)
  local cmds9=(acs person list)
  local cmds10=(acs group member)
  local cmds11=(acs group create)
  local cmds12=(acs group delete)
  local cmds13=(acs group get)
  local cmds14=(acs group list)
  local cmds15=(acs group update)
  local cmds16=(acs group member create)
  local cmds17=(acs group member delete)
  local cmds18=(acs group member list)
  local cmds19=(acs site container)
  local cmds20=(acs site member)
  local cmds21=(acs site create)
  local cmds22=(acs site delete)
  local cmds23=(acs site get)
  local cmds24=(acs site list)
  local cmds25=(acs site update)
  local cmds26=(acs site container get)
  local cmds27=(acs site container list)
  local cmds28=(acs site member create)
  local cmds29=(acs site member delete)
  local cmds30=(acs site member get)
  local cmds31=(acs site member list)
  local cmds32=(acs site member update)
  local cmds33=(acs search cmis)
  local cmds34=(acs search fts)
  local cmds35=(acs search sql)
  local cmds36=(ags securityMark)
  local cmds37=(ags securityMark list)
  local cmds38=(ags securityMark update)

  if CompWordsContainsArray "${cmds38[@]}"; then _picocli_alfresco_ags_securityMark_update; return $?; fi
  if CompWordsContainsArray "${cmds37[@]}"; then _picocli_alfresco_ags_securityMark_list; return $?; fi
  if CompWordsContainsArray "${cmds36[@]}"; then _picocli_alfresco_ags_securityMark; return $?; fi
  if CompWordsContainsArray "${cmds35[@]}"; then _picocli_alfresco_acs_search_sql; return $?; fi
  if CompWordsContainsArray "${cmds34[@]}"; then _picocli_alfresco_acs_search_fts; return $?; fi
  if CompWordsContainsArray "${cmds33[@]}"; then _picocli_alfresco_acs_search_cmis; return $?; fi
  if CompWordsContainsArray "${cmds32[@]}"; then _picocli_alfresco_acs_site_member_update; return $?; fi
  if CompWordsContainsArray "${cmds31[@]}"; then _picocli_alfresco_acs_site_member_list; return $?; fi
  if CompWordsContainsArray "${cmds30[@]}"; then _picocli_alfresco_acs_site_member_get; return $?; fi
  if CompWordsContainsArray "${cmds29[@]}"; then _picocli_alfresco_acs_site_member_delete; return $?; fi
  if CompWordsContainsArray "${cmds28[@]}"; then _picocli_alfresco_acs_site_member_create; return $?; fi
  if CompWordsContainsArray "${cmds27[@]}"; then _picocli_alfresco_acs_site_container_list; return $?; fi
  if CompWordsContainsArray "${cmds26[@]}"; then _picocli_alfresco_acs_site_container_get; return $?; fi
  if CompWordsContainsArray "${cmds25[@]}"; then _picocli_alfresco_acs_site_update; return $?; fi
  if CompWordsContainsArray "${cmds24[@]}"; then _picocli_alfresco_acs_site_list; return $?; fi
  if CompWordsContainsArray "${cmds23[@]}"; then _picocli_alfresco_acs_site_get; return $?; fi
  if CompWordsContainsArray "${cmds22[@]}"; then _picocli_alfresco_acs_site_delete; return $?; fi
  if CompWordsContainsArray "${cmds21[@]}"; then _picocli_alfresco_acs_site_create; return $?; fi
  if CompWordsContainsArray "${cmds20[@]}"; then _picocli_alfresco_acs_site_member; return $?; fi
  if CompWordsContainsArray "${cmds19[@]}"; then _picocli_alfresco_acs_site_container; return $?; fi
  if CompWordsContainsArray "${cmds18[@]}"; then _picocli_alfresco_acs_group_member_list; return $?; fi
  if CompWordsContainsArray "${cmds17[@]}"; then _picocli_alfresco_acs_group_member_delete; return $?; fi
  if CompWordsContainsArray "${cmds16[@]}"; then _picocli_alfresco_acs_group_member_create; return $?; fi
  if CompWordsContainsArray "${cmds15[@]}"; then _picocli_alfresco_acs_group_update; return $?; fi
  if CompWordsContainsArray "${cmds14[@]}"; then _picocli_alfresco_acs_group_list; return $?; fi
  if CompWordsContainsArray "${cmds13[@]}"; then _picocli_alfresco_acs_group_get; return $?; fi
  if CompWordsContainsArray "${cmds12[@]}"; then _picocli_alfresco_acs_group_delete; return $?; fi
  if CompWordsContainsArray "${cmds11[@]}"; then _picocli_alfresco_acs_group_create; return $?; fi
  if CompWordsContainsArray "${cmds10[@]}"; then _picocli_alfresco_acs_group_member; return $?; fi
  if CompWordsContainsArray "${cmds9[@]}"; then _picocli_alfresco_acs_person_list; return $?; fi
  if CompWordsContainsArray "${cmds8[@]}"; then _picocli_alfresco_acs_node_update; return $?; fi
  if CompWordsContainsArray "${cmds7[@]}"; then _picocli_alfresco_acs_node_create; return $?; fi
  if CompWordsContainsArray "${cmds6[@]}"; then _picocli_alfresco_acs_search; return $?; fi
  if CompWordsContainsArray "${cmds5[@]}"; then _picocli_alfresco_acs_site; return $?; fi
  if CompWordsContainsArray "${cmds4[@]}"; then _picocli_alfresco_acs_group; return $?; fi
  if CompWordsContainsArray "${cmds3[@]}"; then _picocli_alfresco_acs_person; return $?; fi
  if CompWordsContainsArray "${cmds2[@]}"; then _picocli_alfresco_acs_node; return $?; fi
  if CompWordsContainsArray "${cmds1[@]}"; then _picocli_alfresco_ags; return $?; fi
  if CompWordsContainsArray "${cmds0[@]}"; then _picocli_alfresco_acs; return $?; fi

  # No subcommands were specified; generate completions for the top-level command.
  _picocli_alfresco; return $?;
}

# Generates completions for the options and subcommands of the `alfresco` command.
function _picocli_alfresco() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="acs ags"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `acs` subcommand.
function _picocli_alfresco_acs() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="node person group site search"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ags` subcommand.
function _picocli_alfresco_ags() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="securityMark"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `node` subcommand.
function _picocli_alfresco_acs_node() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="create update"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `person` subcommand.
function _picocli_alfresco_acs_person() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="list"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `group` subcommand.
function _picocli_alfresco_acs_group() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="member create delete get list update"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `site` subcommand.
function _picocli_alfresco_acs_site() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="container member create delete get list update"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `search` subcommand.
function _picocli_alfresco_acs_search() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="cmis fts sql"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_alfresco_acs_node_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-v --major-version -h --help -V --version"
  local arg_opts="-t --type -n --name -p --parent -s --source -c --comment -a --aspects -m --metadata"

  compopt +o default

  case ${prev_word} in
    -t|--type)
      return
      ;;
    -n|--name)
      return
      ;;
    -p|--parent)
      return
      ;;
    -s|--source)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -c|--comment)
      return
      ;;
    -a|--aspects)
      return
      ;;
    -m|--metadata)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_alfresco_acs_node_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-v --major-version -h --help -V --version"
  local arg_opts="-t --type -n --name -p --parent -s --source -c --comment -a --aspects -m --metadata"

  compopt +o default

  case ${prev_word} in
    -t|--type)
      return
      ;;
    -n|--name)
      return
      ;;
    -p|--parent)
      return
      ;;
    -s|--source)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -c|--comment)
      return
      ;;
    -a|--aspects)
      return
      ;;
    -m|--metadata)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_alfresco_acs_person_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `member` subcommand.
function _picocli_alfresco_acs_group_member() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="create delete list"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_alfresco_acs_group_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="-id --id -dn --displayName -pi --parentIds"

  compopt +o default

  case ${prev_word} in
    -id|--id)
      return
      ;;
    -dn|--displayName)
      return
      ;;
    -pi|--parentIds)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_alfresco_acs_group_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-c --cascade -h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_alfresco_acs_group_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_alfresco_acs_group_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="-sc --skip-count -mi --max-items -w --where"

  compopt +o default

  case ${prev_word} in
    -sc|--skip-count)
      return
      ;;
    -mi|--max-items)
      return
      ;;
    -w|--where)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_alfresco_acs_group_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="-dn --displayName"

  compopt +o default

  case ${prev_word} in
    -dn|--displayName)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_alfresco_acs_group_member_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts=""
  local memberType_pos_param_args="GROUP PERSON" # 2-2 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "create" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 2 && currIndex <= 2 )); then
      positionals=$( compgen -W "$memberType_pos_param_args" -- "${curr_word}" )
    fi
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_alfresco_acs_group_member_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_alfresco_acs_group_member_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="-sc --skip-count -mi --max-items -w --where"

  compopt +o default

  case ${prev_word} in
    -sc|--skip-count)
      return
      ;;
    -mi|--max-items)
      return
      ;;
    -w|--where)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `container` subcommand.
function _picocli_alfresco_acs_site_container() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="get list"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `member` subcommand.
function _picocli_alfresco_acs_site_member() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="create delete get list update"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_alfresco_acs_site_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="-d --description -t --title -v --visibility"
  local visibility_option_args="PUBLIC PRIVATE MODERATED" # --visibility values

  compopt +o default

  case ${prev_word} in
    -d|--description)
      return
      ;;
    -t|--title)
      return
      ;;
    -v|--visibility)
      COMPREPLY=( $( compgen -W "${visibility_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_alfresco_acs_site_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-p --permanent -h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_alfresco_acs_site_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_alfresco_acs_site_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="-sc --skip-count -mi --max-items -w --where"

  compopt +o default

  case ${prev_word} in
    -sc|--skip-count)
      return
      ;;
    -mi|--max-items)
      return
      ;;
    -w|--where)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_alfresco_acs_site_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="-d --description -t --title -v --visibility"
  local visibility_option_args="PRIVATE MODERATED PUBLIC" # --visibility values

  compopt +o default

  case ${prev_word} in
    -d|--description)
      return
      ;;
    -t|--title)
      return
      ;;
    -v|--visibility)
      COMPREPLY=( $( compgen -W "${visibility_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_alfresco_acs_site_container_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_alfresco_acs_site_container_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="-sc --skip-count -mi --max-items"

  compopt +o default

  case ${prev_word} in
    -sc|--skip-count)
      return
      ;;
    -mi|--max-items)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_alfresco_acs_site_member_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts=""
  local role_pos_param_args="SiteConsumer SiteCollaborator SiteContributor SiteManager" # 2-2 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "create" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 2 && currIndex <= 2 )); then
      positionals=$( compgen -W "$role_pos_param_args" -- "${curr_word}" )
    fi
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_alfresco_acs_site_member_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_alfresco_acs_site_member_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_alfresco_acs_site_member_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="-sc --skip-count -mi --max-items"

  compopt +o default

  case ${prev_word} in
    -sc|--skip-count)
      return
      ;;
    -mi|--max-items)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_alfresco_acs_site_member_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts=""
  local role_pos_param_args="SiteConsumer SiteCollaborator SiteContributor SiteManager" # 2-2 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "update" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 2 && currIndex <= 2 )); then
      positionals=$( compgen -W "$role_pos_param_args" -- "${curr_word}" )
    fi
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `cmis` subcommand.
function _picocli_alfresco_acs_search_cmis() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="-q --query -pmi --paging-max-items -psc --paging-skip-count"

  compopt +o default

  case ${prev_word} in
    -q|--query)
      return
      ;;
    -pmi|--paging-max-items)
      return
      ;;
    -psc|--paging-skip-count)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fts` subcommand.
function _picocli_alfresco_acs_search_fts() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="-q --query -pmi --paging-max-items -psc --paging-skip-count"

  compopt +o default

  case ${prev_word} in
    -q|--query)
      return
      ;;
    -pmi|--paging-max-items)
      return
      ;;
    -psc|--paging-skip-count)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `sql` subcommand.
function _picocli_alfresco_acs_search_sql() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="-q --query"

  compopt +o default

  case ${prev_word} in
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `securityMark` subcommand.
function _picocli_alfresco_ags_securityMark() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="list update"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_alfresco_ags_securityMark_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="-sc --skip-count -mi --max-items"

  compopt +o default

  case ${prev_word} in
    -sc|--skip-count)
      return
      ;;
    -mi|--max-items)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_alfresco_ags_securityMark_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts=""
  local op_pos_param_args="ADD REMOVE" # 3-3 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "update" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 3 && currIndex <= 3 )); then
      positionals=$( compgen -W "$op_pos_param_args" -- "${curr_word}" )
    fi
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Define a completion specification (a compspec) for the
# `alfresco`, `alfresco.sh`, and `alfresco.bash` commands.
# Uses the bash `complete` builtin (see [6]) to specify that shell function
# `_complete_alfresco` is responsible for generating possible completions for the
# current word on the command line.
# The `-o default` option means that if the function generated no matches, the
# default Bash completions and the Readline default filename completions are performed.
complete -F _complete_alfresco -o default alfresco alfresco.sh alfresco.bash
